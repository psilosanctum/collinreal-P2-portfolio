[
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/c2cypher/codebase/msda/msda-grad-school/collinreal-P2-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                1     \n  factor                   1     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Religion              0             1   7  12     0        6          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate   mean     sd   p0  p25  p50  p75  p100\n1 Height                0             1  166.    16.0  133  156  166  178   183\n2 Weight                0             1   70.1   21.2   45   55   70   80   110\n3 Investments           0             1 6511.  3035.  2600 4200 6600 9000 11000\n  hist \n1 ▂▁▃▃▇\n2 ▇▂▃▂▂\n3 ▇▂▅▂▅\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible.\n\n# Create a boxplot with the new categorical variable on the x-axis and height on the y-axis\np_boxplot&lt;-ggplot(mydata, aes(x = Religion, y = Height)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Height by Religion\",\n       x = \"Religion\",\n       y = \"Height\")\n# Save the boxplot to a file\nggsave(\"boxplot.png\", plot = p_boxplot)\n\nSaving 7 x 5 in image\n\n# Create a scatterplot with weight on the x-axis and the new numerical variable on the y-axis\np_scatterplot&lt;-ggplot(mydata, aes(x = Weight, y = Investments)) +\n  geom_point() +\n  labs(title = \"Scatterplot of Weight and Investments\",\n       x = \"Weight\",\n       y = \"Investments\")\n# Save the scatterplot to a file\nggsave(\"scatterplot.png\", plot = p_scatterplot)\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis Portfolio",
    "section": "",
    "text": "Hello\n\nAnd hello again\nWelcome to my website and data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!\n\nFeel free to change this text any way you want 😁!"
  },
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "assignments/market_segmentation/pca_kmeans_market_segmentation.html",
    "href": "assignments/market_segmentation/pca_kmeans_market_segmentation.html",
    "title": "Market Segmentation - PCA & K-Means Clustering",
    "section": "",
    "text": "Import Libraries\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.cluster import KMeans\npd.set_option('display.max_columns', None)\n\nsns.set()\n\n\n\nImport Data\n\ndf_customers = pd.read_csv('customers.csv')\ndf_customers\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\n\n\n\n\n0\n100000001\n0\n0\n67\n2\n124670\n1\n2\n\n\n1\n100000002\n1\n1\n22\n1\n150773\n1\n2\n\n\n2\n100000003\n0\n0\n49\n1\n89210\n0\n0\n\n\n3\n100000004\n0\n0\n45\n1\n171565\n1\n1\n\n\n4\n100000005\n0\n0\n53\n1\n149031\n1\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1995\n100001996\n1\n0\n47\n1\n123525\n0\n0\n\n\n1996\n100001997\n1\n1\n27\n1\n117744\n1\n0\n\n\n1997\n100001998\n0\n0\n31\n0\n86400\n0\n0\n\n\n1998\n100001999\n1\n1\n24\n1\n97968\n0\n0\n\n\n1999\n100002000\n0\n0\n25\n0\n68416\n0\n0\n\n\n\n\n2000 rows × 8 columns\n\n\n\n\n\nDescriptive Statistics\n\ndf_customers.describe()\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\n\n\n\n\ncount\n2.000000e+03\n2000.000000\n2000.000000\n2000.000000\n2000.00000\n2000.000000\n2000.000000\n2000.000000\n\n\nmean\n1.000010e+08\n0.457000\n0.496500\n35.909000\n1.03800\n120954.419000\n0.810500\n0.739000\n\n\nstd\n5.774946e+02\n0.498272\n0.500113\n11.719402\n0.59978\n38108.824679\n0.638587\n0.812533\n\n\nmin\n1.000000e+08\n0.000000\n0.000000\n18.000000\n0.00000\n35832.000000\n0.000000\n0.000000\n\n\n25%\n1.000005e+08\n0.000000\n0.000000\n27.000000\n1.00000\n97663.250000\n0.000000\n0.000000\n\n\n50%\n1.000010e+08\n0.000000\n0.000000\n33.000000\n1.00000\n115548.500000\n1.000000\n1.000000\n\n\n75%\n1.000015e+08\n1.000000\n1.000000\n42.000000\n1.00000\n138072.250000\n1.000000\n1.000000\n\n\nmax\n1.000020e+08\n1.000000\n1.000000\n76.000000\n3.00000\n309364.000000\n2.000000\n2.000000\n\n\n\n\n\n\n\n\n\nVariable correlation\n\ndf_customers.corr()\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\n\n\n\n\nID\n1.000000\n0.328262\n0.074403\n-0.085246\n0.012543\n-0.303217\n-0.291958\n-0.378445\n\n\nSex\n0.328262\n1.000000\n0.566511\n-0.182885\n0.244838\n-0.195146\n-0.202491\n-0.300803\n\n\nMarital status\n0.074403\n0.566511\n1.000000\n-0.213178\n0.374017\n-0.073528\n-0.029490\n-0.097041\n\n\nAge\n-0.085246\n-0.182885\n-0.213178\n1.000000\n0.654605\n0.340610\n0.108388\n0.119751\n\n\nEducation\n0.012543\n0.244838\n0.374017\n0.654605\n1.000000\n0.233459\n0.064524\n0.034732\n\n\nIncome\n-0.303217\n-0.195146\n-0.073528\n0.340610\n0.233459\n1.000000\n0.680357\n0.490881\n\n\nOccupation\n-0.291958\n-0.202491\n-0.029490\n0.108388\n0.064524\n0.680357\n1.000000\n0.571795\n\n\nSettlement size\n-0.378445\n-0.300803\n-0.097041\n0.119751\n0.034732\n0.490881\n0.571795\n1.000000\n\n\n\n\n\n\n\n\n\nCorrelation - Heat Map\n\nplt.figure(figsize=(12, 9))\ns = sns.heatmap(df_customers.corr(),\n                annot=True,\n                cmap='RdBu',\n                vmin=-1,\n                vmax=1)\ns.set_xticklabels(s.get_xticklabels(), rotation=90)\nplt.title('Correlation Matrix')\nplt.show()\n\n\n\n\n\n\nScatter Plot - Age vs. Income\n\nplt.figure(figsize=(12, 9))\n# plt.scatter(df_customers.iloc[:, 2], df_customers.iloc[:, 4])\nplt.scatter(df_customers['Age'], df_customers['Income'])\nplt.xlabel('Age')\nplt.ylabel('Income')\n\nText(0, 0.5, 'Income')\n\n\n\n\n\n\n\nStandardize the DataFrame\n\nscaler = StandardScaler()\ncustomers_std = scaler.fit_transform(df_customers)\ncustomers_std\n\narray([[-1.731185  , -0.91739884, -0.99302433, ...,  0.09752361,\n         0.29682303,  1.552326  ],\n       [-1.72945295,  1.09003844,  1.00702467, ...,  0.78265438,\n         0.29682303,  1.552326  ],\n       [-1.7277209 , -0.91739884, -0.99302433, ..., -0.83320224,\n        -1.26952539, -0.90972951],\n       ...,\n       [ 1.7277209 , -0.91739884, -0.99302433, ..., -0.90695688,\n        -1.26952539, -0.90972951],\n       [ 1.72945295,  1.09003844,  1.00702467, ..., -0.60332923,\n        -1.26952539, -0.90972951],\n       [ 1.731185  , -0.91739884, -0.99302433, ..., -1.3789866 ,\n        -1.26952539, -0.90972951]])\n\n\n\n\nHierarchical Clustering\n\nh_cluster = linkage(customers_std, method='ward')\n\nplt.figure(figsize=(12, 9))\nplt.xlabel('Observations')\nplt.ylabel('Distance')\ndendrogram(h_cluster,\n           show_leaf_counts=False,\n           no_labels=True)\nplt.show()\n\n\n\n\n\n\nK-Means Clustering\n\nresults = {}\n\nfor i in range (1, 11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n    kmeans.fit(customers_std)\n    results[i] = kmeans.inertia_\n\nplt.figure(figsize=(12, 9))\nplt.plot(results.keys(), results.values(), marker='o', linestyle='--')\nplt.plot([0.7, 3.2], [12000, 7000], color='#FF8400')\nplt.plot([4.5, 9], [5700, 4000], color='#FF8400')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Sum of squared distance')\nplt.show()\n\n\n\n\n\n\nK-Means Clustering - 4 Clusters\n\nkmeans = KMeans(n_clusters=4, init='k-means++', random_state=42)\nkmeans.fit(customers_std)\n\ndf_customers_kmeans = df_customers.copy()\ndf_customers_kmeans['Segment'] = kmeans.labels_\ndf_customers_kmeans\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\nSegment\n\n\n\n\n0\n100000001\n0\n0\n67\n2\n124670\n1\n2\n2\n\n\n1\n100000002\n1\n1\n22\n1\n150773\n1\n2\n1\n\n\n2\n100000003\n0\n0\n49\n1\n89210\n0\n0\n3\n\n\n3\n100000004\n0\n0\n45\n1\n171565\n1\n1\n0\n\n\n4\n100000005\n0\n0\n53\n1\n149031\n1\n1\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1995\n100001996\n1\n0\n47\n1\n123525\n0\n0\n3\n\n\n1996\n100001997\n1\n1\n27\n1\n117744\n1\n0\n1\n\n\n1997\n100001998\n0\n0\n31\n0\n86400\n0\n0\n3\n\n\n1998\n100001999\n1\n1\n24\n1\n97968\n0\n0\n1\n\n\n1999\n100002000\n0\n0\n25\n0\n68416\n0\n0\n3\n\n\n\n\n2000 rows × 9 columns\n\n\n\n\n\nCharacteristics of the people in each cluster\n\ndf_customers_analysis = df_customers_kmeans.groupby('Segment').mean().round(3)\ndf_customers_analysis\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\n\n\nSegment\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1.000007e+08\n0.032\n0.180\n35.637\n0.738\n140135.807\n1.251\n1.389\n\n\n1\n1.000011e+08\n0.876\n0.999\n29.003\n1.068\n105597.536\n0.630\n0.418\n\n\n2\n1.000009e+08\n0.483\n0.680\n55.881\n2.130\n155931.141\n1.093\n1.078\n\n\n3\n1.000014e+08\n0.403\n0.043\n34.690\n0.742\n94407.322\n0.255\n0.060\n\n\n\n\n\n\n\n\ndf_customers_analysis['Count'] = df_customers_kmeans[['Segment', 'Sex']].groupby('Segment').count()\ndf_customers_analysis['%'] = df_customers_analysis['Count'] / df_customers_analysis['Count'].sum()\ndf_customers_analysis.rename(index={\n    0: 'well-off',\n    1: 'fewer-opportunities',\n    2: 'standard',\n    3: 'career-focused'\n}, inplace=True)\n\ndf_customers_analysis\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\nCount\n%\n\n\nSegment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwell-off\n1.000007e+08\n0.032\n0.180\n35.637\n0.738\n140135.807\n1.251\n1.389\n633\n0.3165\n\n\nfewer-opportunities\n1.000011e+08\n0.876\n0.999\n29.003\n1.068\n105597.536\n0.630\n0.418\n679\n0.3395\n\n\nstandard\n1.000009e+08\n0.483\n0.680\n55.881\n2.130\n155931.141\n1.093\n1.078\n269\n0.1345\n\n\ncareer-focused\n1.000014e+08\n0.403\n0.043\n34.690\n0.742\n94407.322\n0.255\n0.060\n419\n0.2095\n\n\n\n\n\n\n\n\nplt.figure(figsize=(8, 6))\ns = sns.barplot(data=df_customers_analysis, x=df_customers_analysis.index, y='Count', palette=['g','c','r','m'])\nplt.xlabel('Segment')\nplt.ylabel('Population')\nplt.show()\n\n/var/folders/s3/h2qfnwzs63b1k1xft79tdnfw0000gn/T/ipykernel_17120/843998559.py:2: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  s = sns.barplot(data=df_customers_analysis, x=df_customers_analysis.index, y='Count', palette=['g','c','r','m'])\n\n\n\n\n\n\n\nAssign Meaningful Labels to the segments\n\ndf_customers_kmeans['Segment'] = df_customers_kmeans['Segment'].map({\n    0: 'well-off',\n    1: 'fewer-opportunities',\n    2: 'standard',\n    3: 'career-focused'\n})\ndf_customers_kmeans\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\nSegment\n\n\n\n\n0\n100000001\n0\n0\n67\n2\n124670\n1\n2\nstandard\n\n\n1\n100000002\n1\n1\n22\n1\n150773\n1\n2\nfewer-opportunities\n\n\n2\n100000003\n0\n0\n49\n1\n89210\n0\n0\ncareer-focused\n\n\n3\n100000004\n0\n0\n45\n1\n171565\n1\n1\nwell-off\n\n\n4\n100000005\n0\n0\n53\n1\n149031\n1\n1\nwell-off\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1995\n100001996\n1\n0\n47\n1\n123525\n0\n0\ncareer-focused\n\n\n1996\n100001997\n1\n1\n27\n1\n117744\n1\n0\nfewer-opportunities\n\n\n1997\n100001998\n0\n0\n31\n0\n86400\n0\n0\ncareer-focused\n\n\n1998\n100001999\n1\n1\n24\n1\n97968\n0\n0\nfewer-opportunities\n\n\n1999\n100002000\n0\n0\n25\n0\n68416\n0\n0\ncareer-focused\n\n\n\n\n2000 rows × 9 columns\n\n\n\n\n\nVisualize the segmented customers\n\ncolors = ['g','r','c','m']\nsns.set_palette(sns.color_palette(\"pastel\"))\nplt.figure(figsize=(12, 8))\nsns.scatterplot(\n    x=df_customers_kmeans['Age'],\n    y=df_customers_kmeans['Income'],\n    hue=df_customers_kmeans['Segment'],\n    palette=colors\n)\nplt.scatter(62, 160000 , s=60000, facecolors='none', edgecolors='#FF8400' ) \nplt.title('Age vs Income in each segment')\n\nplt.show()\n\n\n\n\n\n\nEducation vs. Income\n\nplt.figure(figsize=(16, 8))\nsns.violinplot(\n    x=df_customers_kmeans['Education'],\n    y=df_customers_kmeans['Income'],\n    hue=df_customers_kmeans['Segment'],\n    palette=['g','r','c','m']\n)\nplt.title('Education vs Income in each segment')\nplt.show()\n\n\n\n\n\n\nImprove K-Means with PCA\n\nfrom sklearn.decomposition import PCA\n\npca = PCA()\npca.fit(customers_std)\n\npca.explained_variance_ratio_\n\narray([0.34103573, 0.23178599, 0.16650585, 0.09955452, 0.06169548,\n       0.04785186, 0.03407515, 0.01749541])\n\n\n\n\nPlot the cumulative sum of variability\n\nplt.figure(figsize=(12, 8))\nplt.plot(range(0, 8), pca.explained_variance_ratio_.cumsum(), marker='o', linestyle='--')\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative Explained Variance')\n\nText(0, 0.5, 'Cumulative Explained Variance')\n\n\n\n\n\n\n\nPick 3 Components from the PCA model\n\npca = PCA(n_components=3)\npca.fit(customers_std)\n\ndf_pca_components = pd.DataFrame(\n    data=pca.components_.round(4),\n    columns=df_customers.columns.values,\n    index=['component 1', 'component 2', 'component 3'])\n\ndf_pca_components\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\n\n\n\n\ncomponent 1\n-0.3454\n-0.3286\n-0.1873\n0.2703\n0.1045\n0.4838\n0.4617\n0.4543\n\n\ncomponent 2\n0.1072\n0.4213\n0.4721\n0.3553\n0.6528\n0.1763\n0.0614\n-0.0308\n\n\ncomponent 3\n0.1435\n-0.3180\n-0.4854\n0.6134\n0.2523\n-0.1236\n-0.3446\n-0.2621\n\n\n\n\n\n\n\n\n\nCorrelation Matrix of the 3 Components\n\ns = sns.heatmap(\n    df_pca_components,\n    vmin=-1,\n    vmax=1,\n    cmap='RdBu',\n    annot=True\n)\nplt.title('Correlation Matrix')\nplt.show()\n\n\n\n\n\n\nImplementing K-Means Clustering\n\npca_scores = pca.transform(customers_std)\n\nresults = {}\n\nfor i in range(1, 11):\n    kmeans_pca = KMeans(n_clusters=i, init='k-means++', random_state=42)\n    kmeans_pca.fit(pca_scores)   # pca_scores are standarzied by default\n    results[i] = kmeans_pca.inertia_\n\n\nplt.figure(figsize=(12, 8))\nplt.plot(results.keys(), results.values(), marker='o', linestyle='--')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Sum of squared distance')\nplt.show()\n\n\n\n\n\n\nImplementing K-Means Clustering w/ 4 Clusters\n\nkmeans_pca = KMeans(n_clusters=4, init='k-means++', random_state=42)\nkmeans_pca.fit(pca_scores)\n\nKMeans(n_clusters=4, random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  KMeans?Documentation for KMeansiFittedKMeans(n_clusters=4, random_state=42) \n\n\n\ndf_segm_pca = pd.concat([df_customers.reset_index(drop=True), pd.DataFrame(pca_scores)], axis=1)\ndf_segm_pca.columns.values[-3:] = ['component 1', 'component 2', 'component 3']\ndf_segm_pca['K-means PCA'] = kmeans_pca.labels_\ndf_segm_pca.to_csv(\"customer_segment_pca.csv\", encoding='utf-8', index=False)\ndf_segm_pca\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\ncomponent 1\ncomponent 2\ncomponent 3\nK-means PCA\n\n\n\n\n0\n100000001\n0\n0\n67\n2\n124670\n1\n2\n2.859782\n0.936676\n2.036586\n2\n\n\n1\n100000002\n1\n1\n22\n1\n150773\n1\n2\n0.944130\n0.394492\n-2.433785\n0\n\n\n2\n100000003\n0\n0\n49\n1\n89210\n0\n0\n-0.023032\n-0.881797\n1.974083\n3\n\n\n3\n100000004\n0\n0\n45\n1\n171565\n1\n1\n2.212422\n-0.563616\n0.635332\n0\n\n\n4\n100000005\n0\n0\n53\n1\n149031\n1\n1\n2.110202\n-0.425124\n1.127543\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1995\n100001996\n1\n0\n47\n1\n123525\n0\n0\n-1.485348\n0.432286\n1.615196\n3\n\n\n1996\n100001997\n1\n1\n27\n1\n117744\n1\n0\n-1.672129\n0.839600\n-0.923547\n1\n\n\n1997\n100001998\n0\n0\n31\n0\n86400\n0\n0\n-1.841798\n-2.158681\n1.116012\n3\n\n\n1998\n100001999\n1\n1\n24\n1\n97968\n0\n0\n-2.716832\n0.561390\n-0.476253\n1\n\n\n1999\n100002000\n0\n0\n25\n0\n68416\n0\n0\n-2.209795\n-2.423450\n0.860709\n3\n\n\n\n\n2000 rows × 12 columns\n\n\n\n\n\nAnalyze Segmentation Results\n\ndf_segm_pca_analysis = df_segm_pca.groupby(['K-means PCA']).mean().round(4)\ndf_segm_pca_analysis\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\ncomponent 1\ncomponent 2\ncomponent 3\n\n\nK-means PCA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1.000007e+08\n0.0347\n0.1924\n35.4479\n0.7382\n140183.3155\n1.2539\n1.3912\n1.4667\n-0.9422\n-0.1839\n\n\n1\n1.000012e+08\n0.9190\n0.9670\n28.9580\n1.0645\n106617.4678\n0.6597\n0.4273\n-1.2052\n0.6160\n-0.8333\n\n\n2\n1.000009e+08\n0.4925\n0.6842\n55.8421\n2.1278\n157389.3872\n1.1128\n1.0977\n1.5153\n2.1581\n0.8680\n\n\n3\n1.000013e+08\n0.3418\n0.1016\n35.0462\n0.7667\n92501.5889\n0.2079\n0.0439\n-1.2220\n-0.8951\n1.0196\n\n\n\n\n\n\n\n\nSegment 0: low career and experience values with high education and lifestyle values.\nLabel: Standard\nSegment 1: high career but low education, lifestyle and experience\nLabel: Career focused\nSegment 2: low career, education and lifestyle, but high life experience\nLabel: Fewer opportunities\nSegment 3: high career, education and lifestyle as well as high life experience\nLabel: Well-off\n\n\ndf_segm_pca_analysis['Count'] = df_segm_pca[['K-means PCA', 'Sex']].groupby(['K-means PCA']).count()\ndf_segm_pca_analysis['%'] = df_segm_pca_analysis['Count'] / df_segm_pca_analysis['Count'].sum()\ndf_segm_pca_analysis.rename(index={\n    0: 'standard',\n    1: 'career-focused',\n    2: 'fewer-opportunities',\n    3: 'well-off'\n}, inplace=True)\n\ndf_segm_pca_analysis\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\ncomponent 1\ncomponent 2\ncomponent 3\nCount\n%\n\n\nK-means PCA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstandard\n1.000007e+08\n0.0347\n0.1924\n35.4479\n0.7382\n140183.3155\n1.2539\n1.3912\n1.4667\n-0.9422\n-0.1839\n634\n0.3170\n\n\ncareer-focused\n1.000012e+08\n0.9190\n0.9670\n28.9580\n1.0645\n106617.4678\n0.6597\n0.4273\n-1.2052\n0.6160\n-0.8333\n667\n0.3335\n\n\nfewer-opportunities\n1.000009e+08\n0.4925\n0.6842\n55.8421\n2.1278\n157389.3872\n1.1128\n1.0977\n1.5153\n2.1581\n0.8680\n266\n0.1330\n\n\nwell-off\n1.000013e+08\n0.3418\n0.1016\n35.0462\n0.7667\n92501.5889\n0.2079\n0.0439\n-1.2220\n-0.8951\n1.0196\n433\n0.2165\n\n\n\n\n\n\n\n\n\nNumber of Customers per Segment\n\nplt.figure(figsize=(8, 6))\ns = sns.barplot(data=df_segm_pca_analysis, x=df_segm_pca_analysis.index, y='Count', palette=['g','c','r','m'])\nplt.xlabel('Segment')\nplt.ylabel('Population')\nplt.show()\n\n/var/folders/s3/h2qfnwzs63b1k1xft79tdnfw0000gn/T/ipykernel_17120/2239997931.py:2: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  s = sns.barplot(data=df_segm_pca_analysis, x=df_segm_pca_analysis.index, y='Count', palette=['g','c','r','m'])\n\n\n\n\n\n\n\nAdd segment labels to original dataset\n\ndf_segm_pca['Segment'] = df_segm_pca['K-means PCA'].map({\n    0: 'standard',\n    1: 'career-focused',\n    2: 'fewer-opportunities',\n    3: 'well-off'\n})\ndf_segm_pca\n\n\n\n\n\n\n\n\nID\nSex\nMarital status\nAge\nEducation\nIncome\nOccupation\nSettlement size\ncomponent 1\ncomponent 2\ncomponent 3\nK-means PCA\nSegment\n\n\n\n\n0\n100000001\n0\n0\n67\n2\n124670\n1\n2\n2.859782\n0.936676\n2.036586\n2\nfewer-opportunities\n\n\n1\n100000002\n1\n1\n22\n1\n150773\n1\n2\n0.944130\n0.394492\n-2.433785\n0\nstandard\n\n\n2\n100000003\n0\n0\n49\n1\n89210\n0\n0\n-0.023032\n-0.881797\n1.974083\n3\nwell-off\n\n\n3\n100000004\n0\n0\n45\n1\n171565\n1\n1\n2.212422\n-0.563616\n0.635332\n0\nstandard\n\n\n4\n100000005\n0\n0\n53\n1\n149031\n1\n1\n2.110202\n-0.425124\n1.127543\n0\nstandard\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1995\n100001996\n1\n0\n47\n1\n123525\n0\n0\n-1.485348\n0.432286\n1.615196\n3\nwell-off\n\n\n1996\n100001997\n1\n1\n27\n1\n117744\n1\n0\n-1.672129\n0.839600\n-0.923547\n1\ncareer-focused\n\n\n1997\n100001998\n0\n0\n31\n0\n86400\n0\n0\n-1.841798\n-2.158681\n1.116012\n3\nwell-off\n\n\n1998\n100001999\n1\n1\n24\n1\n97968\n0\n0\n-2.716832\n0.561390\n-0.476253\n1\ncareer-focused\n\n\n1999\n100002000\n0\n0\n25\n0\n68416\n0\n0\n-2.209795\n-2.423450\n0.860709\n3\nwell-off\n\n\n\n\n2000 rows × 13 columns\n\n\n\n\n\nVisualize segments with respect to first two components\n\nplt.figure(figsize=(10, 8))\nsns.scatterplot(\n    x=df_segm_pca['component 2'],\n    y=df_segm_pca['component 1'],\n    hue=df_segm_pca['Segment'],\n    palette=['g','r','c','m']\n)\nplt.scatter(2.35, 2 , s=60000, facecolors='none', edgecolors='g' )\nplt.scatter(-1.2, 2 , s=60000, facecolors='none', edgecolors='y' )\nplt.scatter(-1, -1 , s=30000, facecolors='none', edgecolors='b' )\nplt.scatter(1.2, -1 , s=40000, facecolors='none', edgecolors='r' )\n\nplt.title('Component 1 vs Component 2')\nplt.show()"
  },
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "",
    "text": "Comma.ai is one of the few respectable tech companies offering one of the most advanced self-driving products: the comma 3x. - Automates ~70+% of daily driving. - Performs exceptionally well on highways and other roads with identifiable lanes. - Installed and mounted on a car’s front windshield, so it can receive a live data feed of the road. - Using this live feed, the comma 3x projects the path for the vehicle to follow.\n\n\n      Comma uploads driving data to its servers to train better models and improve the self-driving experience over time. We can access our driving data using the comma API. Using our driving data, we can create metrics to analyze our driving patterns and behavior.\n\n\n\nVisit the website for a more comprehensive overview: comma.ai"
  },
  {
    "objectID": "data-exercise/data-exercise.html#introduction",
    "href": "data-exercise/data-exercise.html#introduction",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "",
    "text": "Comma.ai is one of the few respectable tech companies offering one of the most advanced self-driving products: the comma 3x. - Automates ~70+% of daily driving. - Performs exceptionally well on highways and other roads with identifiable lanes. - Installed and mounted on a car’s front windshield, so it can receive a live data feed of the road. - Using this live feed, the comma 3x projects the path for the vehicle to follow.\n\n\n      Comma uploads driving data to its servers to train better models and improve the self-driving experience over time. We can access our driving data using the comma API. Using our driving data, we can create metrics to analyze our driving patterns and behavior.\n\n\n\nVisit the website for a more comprehensive overview: comma.ai"
  },
  {
    "objectID": "data-exercise/data-exercise.html#set-up-virtual-environmentinstall-dependencies-mac",
    "href": "data-exercise/data-exercise.html#set-up-virtual-environmentinstall-dependencies-mac",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Set Up Virtual Environment/Install Dependencies (Mac)",
    "text": "Set Up Virtual Environment/Install Dependencies (Mac)\n\nExecute these commands in your terminal\n\nCreate local virtual env: python3 -m venv .venv\nActivate local virtual env: source .venv/bin/activate\nInstall Python dependencies: pip3 install -r requirements.txt\nInstall Homebrew: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nInstall ‘ffmpeg’ via Homebrew: brew install ffmpeg\nOPTIONAL - Connect your personal Comma AI device:\n\ntouch .env\nnano .env - opens .env file in terminal\nCOMMA_AI_KEY=\"insert your Comma API key\"\nDONGLE_ID=\"insert your dongle ID\"\nSave file and exit nano"
  },
  {
    "objectID": "data-exercise/data-exercise.html#import-libraries-set-configurations",
    "href": "data-exercise/data-exercise.html#import-libraries-set-configurations",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Import Libraries & Set Configurations",
    "text": "Import Libraries & Set Configurations\n\nimport pandas as pd # data processing\nimport urllib.request # download file from URL\nimport ssl # bypass SSL certificate\nimport warnings # ignore non-critical warning outputs\nimport cv2 # video processing\nimport matplotlib.pyplot as plt # data visualization\nimport matplotlib.image as mpimg # data visualization\nimport subprocess # running terminal commands in Python script\nimport seaborn_image as isns # data visualization\nfrom requests import get # API request\nfrom time import sleep # Prevent triggering the API limit\nfrom os import environ, listdir, mkdir, makedirs # directory manipulation & file saving\nimport os.path\nfrom dotenv import load_dotenv # load environment variables\nfrom tqdm import tqdm # added as a meme, prints unnecessary loading bar in terminal during for loops\nfrom moviepy.editor import VideoFileClip, concatenate_videoclips # video editing\nplt.style.use('ggplot')\nwarnings.filterwarnings('ignore')\nssl._create_default_https_context = ssl._create_unverified_context\npd.set_option('display.max_columns', None)\nload_dotenv()\n\nTrue"
  },
  {
    "objectID": "data-exercise/data-exercise.html#create-variables-for-api-requests",
    "href": "data-exercise/data-exercise.html#create-variables-for-api-requests",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Create Variables for API Requests",
    "text": "Create Variables for API Requests\nThe first step to receive the recording of my longest trip (College Station) since installation is making sure I send the correct parameters to the API endpoint. Comma.ai’s API requests require an authentication token and the dongle ID of a user’s Comma device.\n\nTOKEN= environ.get('COMMA_AI_KEY')\nDONGLE_ID = environ.get('DONGLE_ID')\nheaders = {\n    'Authorization': 'JWT {}'.format(TOKEN)\n}\nBASE_URL = 'https://api.commadotai.com'"
  },
  {
    "objectID": "data-exercise/data-exercise.html#createcheck-file-paths-exist",
    "href": "data-exercise/data-exercise.html#createcheck-file-paths-exist",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Create/Check File Paths Exist",
    "text": "Create/Check File Paths Exist\n\nroute_data_path = 'data/route-data'\nvid_urls_path = 'data/vid-urls'\nvid_save_files_path = 'data/vid-files'\nmp4_directory = 'data/vid-mp4'\nfull_vid_path = 'data/vid-full'\nimages_path = 'data/route-images'\n\npaths = [\n    route_data_path,\n    vid_urls_path,\n    vid_save_files_path,\n    mp4_directory,\n    full_vid_path,\n    images_path,\n]\n\nfor route_vid_path in paths:\n    if os.path.exists(route_vid_path) == False: mkdir(route_vid_path)\n    else: pass"
  },
  {
    "objectID": "data-exercise/data-exercise.html#api-request-1---returns-user-driving-data",
    "href": "data-exercise/data-exercise.html#api-request-1---returns-user-driving-data",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "API Request #1 - Returns User Driving Data",
    "text": "API Request #1 - Returns User Driving Data\nAfter creating the API variables, we can request the API endpoint which returns our driving data in the response output. The first API request will return various metrics from all of my driving trips since installing my Comma 3x. It will provide us with the route name for every trip. For our current task, we have chosen our longest trip by miles, so we will sort the dataset by longest trip to identify the route name. After sorting by descending order, the first row’s value in column fullname is the route name.\n\ndef query_route_data(BASE_URL: str):\n    # Send API request\n    resp = get(\n        f'{BASE_URL}/v1/devices/{DONGLE_ID}/routes_segments?start=1706050612200&end=1811678741855', headers=headers, \n        verify=False)\n\n    # Convert API response to JSON\n    content = resp.json()\n\n    # Create DataFrame w/ API Response\n    df = pd.DataFrame(content)\n\n    # Remove latitude, longitude variables for privacy.\n    df = df[[\n        'fullname', 'length', 'create_time', 'end_time_utc_millis',\n        'end_time', 'init_logmonotime', 'maxqcamera', 'maxqlog', \n        'platform', 'procqcamera', 'procqlog', 'segment_end_times', \n        'segment_numbers', 'segment_start_times', 'start_time_utc_millis', 'version'\n    ]]\n\n    # Time metric conversions\n    df['time_diff_millis'] = df['end_time_utc_millis'] - df['start_time_utc_millis']\n    df['time_diff_seconds'] = df['time_diff_millis'].__truediv__(1000)\n    df['time_diff_minutes'] = df['time_diff_seconds'].__truediv__(60)\n    df['time_diff_hours'] = df['time_diff_minutes'].__truediv__(60)\n    df['end_time'] = pd.to_datetime(df['end_time']).dt.strftime(\"%Y-%m-%d\")\n\n    # strip_dongle_id\n    removed_dongle_route_list = []\n    for idx, row in df.iterrows():\n        stripped_value = row['fullname'].replace(f'{DONGLE_ID}', 'INSERT-DONGLE-ID-HERE')\n        removed_dongle_route_list.append(stripped_value)\n    df['fullname'] = removed_dongle_route_list\n    \n    # df = df.sort_values('end_time_utc_millis', ascending=False)\n    df = df.sort_values('length', ascending=False)\n    route_names = df['fullname'].tolist()\n    route_df = pd.DataFrame()\n    route_df['route_name'] = route_names\n\n    # Save route data to csv\n    route_df.to_csv(f'{route_data_path}/route_names.csv', index=False)\n    df.to_csv(f'{route_data_path}/trip_driving_data.csv', index=False)\n    print(df.head(5))\n\nquery_route_data(BASE_URL=BASE_URL)\n\n                                       fullname   length  create_time  \\\n262  INSERT-DONGLE-ID-HERE|2024-04-07--06-08-29  156.534   1712870311   \n182  INSERT-DONGLE-ID-HERE|2024-05-07--16-10-54  139.620   1715288166   \n26   INSERT-DONGLE-ID-HERE|00000010--81d5c2726b  138.466   1718914246   \n342  INSERT-DONGLE-ID-HERE|2024-03-07--19-35-36  137.845   1709869924   \n397  INSERT-DONGLE-ID-HERE|2024-02-22--19-21-56  137.806   1708659973   \n\n     end_time_utc_millis    end_time  init_logmonotime  maxqcamera  maxqlog  \\\n262        1712514891000  2024-04-07   599843939121748         146      146   \n182        1715129896000  2024-05-08   111658668871310         227      227   \n26         1718914178000  2024-06-20       39606234306         165      165   \n342        1709869718000  2024-03-08   212451552872081         132      132   \n397        1708659678000  2024-02-23   630945949563076         139      139   \n\n              platform  procqcamera  procqlog  \\\n262  TOYOTA CAMRY 2021          146       146   \n182  TOYOTA CAMRY 2021          227       227   \n26   TOYOTA_CAMRY_TSS2          165       165   \n342  TOYOTA CAMRY 2021          132       132   \n397  TOYOTA CAMRY 2021          139       139   \n\n                                     segment_end_times  \\\n262  [1712506162000, 1712506222000, 1712506282000, ...   \n182  [1715116312000, 1715116372000, 1715116432000, ...   \n26   [1718904334000, 1718904394000, 1718904454000, ...   \n342  [1709861796000, 1709861856000, 1709861916000, ...   \n397  [1708651376000, 1708651436000, 1708651496000, ...   \n\n                                       segment_numbers  \\\n262  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...   \n182  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...   \n26   [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...   \n342  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...   \n397  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...   \n\n                                   segment_start_times  start_time_utc_millis  \\\n262  [1712506102000, 1712506162000, 1712506222000, ...          1712506102000   \n182  [1715116252000, 1715116312000, 1715116372000, ...          1715116252000   \n26   [1718904274000, 1718904334000, 1718904394000, ...          1718904274000   \n342  [1709861736000, 1709861796000, 1709861856000, ...          1709861736000   \n397  [1708651316000, 1708651376000, 1708651436000, ...          1708651316000   \n\n           version  time_diff_millis  time_diff_seconds  time_diff_minutes  \\\n262  0.9.6-release           8789000             8789.0         146.483333   \n182  0.9.6-release          13644000            13644.0         227.400000   \n26   0.9.7-release           9904000             9904.0         165.066667   \n342  0.9.6-release           7982000             7982.0         133.033333   \n397  0.9.5-release           8362000             8362.0         139.366667   \n\n     time_diff_hours  \n262         2.441389  \n182         3.790000  \n26          2.751111  \n342         2.217222  \n397         2.322778"
  },
  {
    "objectID": "data-exercise/data-exercise.html#api-request-2---returns-urls-to-download-video-files",
    "href": "data-exercise/data-exercise.html#api-request-2---returns-urls-to-download-video-files",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "API Request #2 - Returns URLs To Download Video Files",
    "text": "API Request #2 - Returns URLs To Download Video Files\nUsing the route name, we can submit our second API request to an endpoint storing the URLs of our downloadable video files (.ts file type). Before downloading our files, we store the URLs from the API response in a text file, so we can access the URL data locally.\n\ndef query_to_extract_urls(BASE_URL: str, route_name: str):\n    df = pd.read_csv(f'{route_data_path}/route_names.csv')\n\n    # Insert dongle ID into route name\n    route_name_dongle_list = []\n    for idx, row in df.iterrows():\n        converted_route_name = row['route_name'].replace(\n            'INSERT-DONGLE-ID-HERE', f'{DONGLE_ID}')\n        route_name_dongle_list.append(converted_route_name)\n    df['route_name'] = route_name_dongle_list\n\n    download_recent_trip_vids = df.loc[df['route_name'] == route_name]\n    download_recent_trip_vids = download_recent_trip_vids['route_name'].tolist()\n\n    for route in tqdm(download_recent_trip_vids):\n        with get(\n            f'{BASE_URL}/v1/route/{route}/files', \n            headers=headers, verify=False, \n            stream=True, \n            timeout=10) as response:\n            content = response.json()['qcameras']\n            with open(\n                f'{vid_urls_path}' + f'/{route.replace(f\"{DONGLE_ID}|\", \"\")}.txt',\n                mode=\"wb\") as file:\n                for url in content:\n                    file.write(\n                        url.replace(\n                            f\"{DONGLE_ID}\", \n                            \"INSERT-DONGLE-ID-HERE\").encode('utf-8') + ' \\n'.encode('utf-8'))\n    urls_list = []\n    with open(\n        f'{vid_urls_path}' + f'/{route.replace(f\"{DONGLE_ID}|\", \"\")}.txt',\n        mode=\"r\") as file:\n        url_list = file.readlines()\n        for url in url_list:\n            urls_list.append(url)\n    print(\"Total number of URLs to download:\", len(urls_list))\n    print(\"\\n Preview 5 URLs:\", *url_list[:5], sep='\\n')\n\nquery_to_extract_urls(BASE_URL=BASE_URL, route_name=f'{DONGLE_ID}|2024-04-07--06-08-29')\n\nTotal number of URLs to download: 147\n\n Preview 5 URLs:\nhttps://commadata2.blob.core.windows.net/qlog/INSERT-DONGLE-ID-HERE/2024-04-07--06-08-29/0/qcamera.ts?se=2024-06-29T05%3A31%3A56Z&sp=r&sv=2024-05-04&sr=b&rscd=attachment%3B%20filename%3DINSERT-DONGLE-ID-HERE_2024-04-07--06-08-29--0--qcamera.ts&sig=q6JX4aNZIKcTE3dKekSFGQxsxdZ7/iPUVj1xqTty7o4%3D \n\nhttps://commadata2.blob.core.windows.net/qlog/INSERT-DONGLE-ID-HERE/2024-04-07--06-08-29/1/qcamera.ts?se=2024-06-29T05%3A31%3A56Z&sp=r&sv=2024-05-04&sr=b&rscd=attachment%3B%20filename%3DINSERT-DONGLE-ID-HERE_2024-04-07--06-08-29--1--qcamera.ts&sig=QSOHrRpNkd9QRz0tgxn//UWGV5JBO5YIpYsE75VXzb4%3D \n\nhttps://commadata2.blob.core.windows.net/qlog/INSERT-DONGLE-ID-HERE/2024-04-07--06-08-29/2/qcamera.ts?se=2024-06-29T05%3A31%3A56Z&sp=r&sv=2024-05-04&sr=b&rscd=attachment%3B%20filename%3DINSERT-DONGLE-ID-HERE_2024-04-07--06-08-29--2--qcamera.ts&sig=d6EQhljWv6fvEW8eN6Kc2D8joc5anSvDyofDHF%2BtR74%3D \n\nhttps://commadata2.blob.core.windows.net/qlog/INSERT-DONGLE-ID-HERE/2024-04-07--06-08-29/3/qcamera.ts?se=2024-06-29T05%3A31%3A56Z&sp=r&sv=2024-05-04&sr=b&rscd=attachment%3B%20filename%3DINSERT-DONGLE-ID-HERE_2024-04-07--06-08-29--3--qcamera.ts&sig=WXx22sFTQGziQv2ZfFF6A4PALL2MoDqKmgZNMPpvK1c%3D \n\nhttps://commadata2.blob.core.windows.net/qlog/INSERT-DONGLE-ID-HERE/2024-04-07--06-08-29/4/qcamera.ts?se=2024-06-29T05%3A31%3A56Z&sp=r&sv=2024-05-04&sr=b&rscd=attachment%3B%20filename%3DINSERT-DONGLE-ID-HERE_2024-04-07--06-08-29--4--qcamera.ts&sig=At6cC5eEOaKbrPQLWoYzahVGpmf9Zs79vRsGkkWZLFY%3D"
  },
  {
    "objectID": "data-exercise/data-exercise.html#downloading-our-driving-video-.ts-files",
    "href": "data-exercise/data-exercise.html#downloading-our-driving-video-.ts-files",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Downloading Our Driving Video .ts Files",
    "text": "Downloading Our Driving Video .ts Files\nWith our URLs stored locally in a text file, we can iterate over and request each URL to download and save our video files locally.  Note: You cannot run this function since I did not provide my API token or dongle id\n\ndef download_vid_files_from_url():\n    for filename in tqdm(listdir(vid_urls_path)):\n        print(\"Video URLs file:\", vid_urls_path +  f'/{filename}')\n        count = 0\n        f = os.path.join(vid_urls_path, filename)\n        file = open(f, 'rb')\n        print(\"Beginning video downloads...\")\n        for url in tqdm(file):\n            decode_url = url.decode('utf-8')\n            url_insert_dongle_id = decode_url.replace(\n                \"INSERT-DONGLE-ID-HERE\", f\"{DONGLE_ID}\")\n            create_route_vid_path = filename.replace('.txt', '').replace(f'{DONGLE_ID}|', '')\n            urllib.request.urlretrieve(\n                url_insert_dongle_id, \n                vid_save_files_path +\n                f'/{create_route_vid_path}' + \n                f'/x{str(count).rjust(3, \"0\")}_' + \n                f'{filename.replace(\".txt\", \"\").replace(f\"{DONGLE_ID}|\", \"\")}.ts')\n            count += 1\n        sleep(17)\n        print(\"Video files successfully downloaded!\")\n        print(\"Total files downloaded:\", count)\n        \ndownload_vid_files_from_url()\n\nVideo URLs file: data/vid-urls/2024-04-07--06-08-29.txt\nBeginning video downloads...\nVideo files successfully downloaded!\nTotal files downloaded: 147"
  },
  {
    "objectID": "data-exercise/data-exercise.html#converting-file-type-to-mp4",
    "href": "data-exercise/data-exercise.html#converting-file-type-to-mp4",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Converting File Type to MP4",
    "text": "Converting File Type to MP4\nAfter looping over the URLs to download our driving videos, we convert our video file type from .ts to .mp4 since it’s one of the most common file types for videos. We store the converted videos in a separate directory, so that we can loop over the 147 files without the original files making trouble.\n\ndef convert_ts_to_mp4(vid_clip_directory: str):\n    route_directory = vid_save_files_path + vid_clip_directory\n    if path.exists(mp4_directory + vid_clip_directory) == False: \n        mkdir(mp4_directory + vid_clip_directory)\n    else: pass\n    \n    files_list = []\n    for file in listdir(route_directory): files_list.append(file)\n    files_list.sort()\n    for filename in files_list:\n        infile = route_directory + f'/{filename}'\n        outfile = mp4_directory + f'/{vid_clip_directory}' + f'/{filename.replace(\".ts\", \"\")}.mp4'\n        subprocess.run([\n            'ffmpeg',\n            '-i',\n            infile,\n            outfile,\n        ])\n# convert_ts_to_mp4(vid_clip_directory='/2024-04-07--06-08-29')"
  },
  {
    "objectID": "data-exercise/data-exercise.html#concatenate-the-video-clips",
    "href": "data-exercise/data-exercise.html#concatenate-the-video-clips",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Concatenate The Video Clips",
    "text": "Concatenate The Video Clips\nTo facilitate the distribution of video data, Comma API splits our video data into short clips to reduce the memory size. Our objective is to capture images from our entire trip; therefore, we need to concatenate the 147 video files. Ideally, we’d prefer to create one MP4 from the concatenation. Due to storage size, we split the final trip into 4 parts. If we don’t split the video data in this manner, the file size would be too large and we wouldn’t be able to push the video to GitHub.\n\ndef concat_vid_clips(vid_clip_directory: str):\n    vid_clips_list = []\n    route_mp4_path = mp4_directory + vid_clip_directory\n\n    files_list = []\n    for file in listdir(route_mp4_path): files_list.append(file)\n    files_list.sort()\n\n    def multi_part_full_vid(video_title: str, start_range: int, end_range: int):\n        for filename in files_list[start_range:end_range]:\n            f = os.path.join(route_mp4_path, filename)\n            vid_clip = VideoFileClip(f)\n            vid_clips_list.append(vid_clip)\n        final_clip = concatenate_videoclips(clips=vid_clips_list, method='chain')\n        final_clip.write_videofile(f'{full_vid_path}' + f'/{video_title}.mp4')\n        vid_clips_list.clear()\n\n    multi_part_full_vid(video_title=\"trip_part_1\", start_range=0, end_range=40)\n    multi_part_full_vid(video_title=\"trip_part_2\", start_range=41, end_range=80)\n    multi_part_full_vid(video_title=\"trip_part_3\", start_range=81, end_range=120)\n    multi_part_full_vid(video_title=\"trip_part_4\", start_range=121, end_range=147)\n\n# concat_vid_clips(vid_clip_directory='/2024-04-07--06-08-29')"
  },
  {
    "objectID": "data-exercise/data-exercise.html#save-images-from-the-video",
    "href": "data-exercise/data-exercise.html#save-images-from-the-video",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Save Images From The Video",
    "text": "Save Images From The Video\nFinally, we play the videos and save an Image every 2500 frames.\n\ndef save_frame_range(\n    video_path: str, \n    start_frame: int, \n    stop_frame: int, \n    step_frame: int,\n    dir_path: str, \n    basename: str, \n    ext='png'):\n\n    cap = cv2.VideoCapture(video_path)\n\n    if not cap.isOpened(): return\n\n    makedirs(dir_path, exist_ok=True)\n    base_path = os.path.join(dir_path, basename)\n\n    digit = len(str(int(cap.get(cv2.CAP_PROP_FRAME_COUNT))))\n\n    for n in range(start_frame, stop_frame, step_frame):\n        cap.set(cv2.CAP_PROP_POS_FRAMES, n)\n        ret, frame = cap.read()\n        if ret: cv2.imwrite(f'{base_path}_{str(n).zfill(digit)}.{ext}', frame)\n        else: return\n\nsave_frame_range(full_vid_path + '/trip_part_1.mp4', 0, 200000, \n                 2500, images_path, 'part1_video_img_frame')\n\nsave_frame_range(full_vid_path + '/trip_part_2.mp4', 0, 200000, \n                2500, images_path, 'part2_video_img_frame')\n\nsave_frame_range(full_vid_path + '/trip_part_3.mp4', 0, 200000, \n                 2500, images_path, 'part3_video_img_frame')\n\nsave_frame_range(full_vid_path + '/trip_part_4.mp4', 0, 200000, \n                 2500, images_path, 'part4_video_img_frame')\n\n# image_dir = listdir(images_path)\n# for image in image_dir: print(image)"
  },
  {
    "objectID": "data-exercise/data-exercise.html#college-station-trip-part-14",
    "href": "data-exercise/data-exercise.html#college-station-trip-part-14",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "College Station Trip: Part 1/4",
    "text": "College Station Trip: Part 1/4"
  },
  {
    "objectID": "data-exercise/data-exercise.html#notable-images-from-part-14",
    "href": "data-exercise/data-exercise.html#notable-images-from-part-14",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Notable Images From Part 1/4",
    "text": "Notable Images From Part 1/4\n\n\n\n\n\n\nCollege Station\n\n\n\n\n\n\n\nWater Tower\n\n\n\n\n\n\n\n\n\nCountry Road\n\n\n\n\n\n\n\nTraffic Light"
  },
  {
    "objectID": "data-exercise/data-exercise.html#plotting-images",
    "href": "data-exercise/data-exercise.html#plotting-images",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Plotting Images",
    "text": "Plotting Images\n\ncstat = f'{images_path}' + '/part1_video_img_frame_002500.png'\nwater_tower = f'{images_path}' + '/part4_video_img_frame_25000.png'\ncountry_road = f'{images_path}' + '/part3_video_img_frame_10000.png'\ntraffic_light = f'{images_path}' + '/part1_video_img_frame_010000.png'\n\ncstat_image = plt.imread(cstat, format='png')\nwater_tower_image = plt.imread(water_tower, format='png')\ncountry_road_image = plt.imread(country_road, format='png')\ntraffic_light_image = plt.imread(traffic_light, format='png')\n\nax0 = isns.imgplot(cstat_image, cmap='seismic', gray=True)\nax1 = isns.imgplot(water_tower_image, cmap='seismic', gray=True)\nax2 = isns.imgplot(country_road_image, cmap='seismic', gray=True)\nax3 = isns.imgplot(traffic_light_image, cmap='seismic', gray=True)\nplt.show()"
  },
  {
    "objectID": "data-exercise/data-exercise.html#plotting-images---histograms",
    "href": "data-exercise/data-exercise.html#plotting-images---histograms",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Plotting Images - Histograms",
    "text": "Plotting Images - Histograms\n\nplt.subplot(2,2,1)\nplt.hist(cstat_image.ravel())\nplt.subplot(2,2,2)\nplt.hist(water_tower_image.ravel())\nplt.subplot(2,2,3)\nplt.hist(country_road_image.ravel())\nplt.subplot(2,2,4)\nplt.hist(traffic_light_image.ravel())\nplt.show()"
  },
  {
    "objectID": "data-exercise/data-exercise.html#plotting-images---boxplots",
    "href": "data-exercise/data-exercise.html#plotting-images---boxplots",
    "title": "Comma AI - Video Processing Driving Data",
    "section": "Plotting Images - Boxplots",
    "text": "Plotting Images - Boxplots\n\nplt.subplot(2,2,1)\nplt.boxplot(cstat_image.ravel())\nplt.subplot(2,2,2)\nplt.boxplot(water_tower_image.ravel())\nplt.subplot(2,2,3)\nplt.boxplot(country_road_image.ravel())\nplt.subplot(2,2,4)\nplt.boxplot(traffic_light_image.ravel())\nplt.show()"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "library(dslabs) # to import dataset\nlibrary(tidyverse) # data aggregation\nlibrary(dplyr) # data aggregation? \ndata(gapminder)\n\n\n\n\n\nhelp(\"gapminder\")\n\n\n\n\n\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n\n\n\n\n\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\n\n\n\n\nclass(gapminder)\n\n[1] \"data.frame\""
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#loading-and-checking-data",
    "href": "coding-exercise/coding-exercise.html#loading-and-checking-data",
    "title": "R Coding Exercise",
    "section": "",
    "text": "library(dslabs) # to import dataset\nlibrary(tidyverse) # data aggregation\nlibrary(dplyr) # data aggregation? \ndata(gapminder)\n\n\n\n\n\nhelp(\"gapminder\")\n\n\n\n\n\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n\n\n\n\n\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\n\n\n\n\nclass(gapminder)\n\n[1] \"data.frame\""
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#processing-data",
    "href": "coding-exercise/coding-exercise.html#processing-data",
    "title": "R Coding Exercise",
    "section": "Processing Data",
    "text": "Processing Data\n\nAssign only African countries to a new object/variable.\n\nafricadata = filter(gapminder, continent == 'Africa')\nhead(africadata)\n\n       country year infant_mortality life_expectancy fertility population\n1      Algeria 1960            148.2           47.50      7.65   11124892\n2       Angola 1960            208.0           35.98      7.32    5270844\n3        Benin 1960            186.9           38.29      6.28    2431620\n4     Botswana 1960            115.5           50.34      6.62     524029\n5 Burkina Faso 1960            161.3           35.21      6.29    4829291\n6      Burundi 1960            145.1           40.58      6.95    2786740\n          gdp continent          region\n1 13828152297    Africa Northern Africa\n2          NA    Africa   Middle Africa\n3   621797131    Africa  Western Africa\n4   124460933    Africa Southern Africa\n5   596612183    Africa  Western Africa\n6   341126765    Africa  Eastern Africa\n\n\n\n\nAfrica Data Structure Overview\n\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n\n\n\nAfrica Summary\n\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n\n\n\nAfrican Infant Mortality Object\n\ninfant_survival_rate = africadata %&gt;%\n  select(infant_mortality, life_expectancy)\nhead(infant_survival_rate)\n\n  infant_mortality life_expectancy\n1            148.2           47.50\n2            208.0           35.98\n3            186.9           38.29\n4            115.5           50.34\n5            161.3           35.21\n6            145.1           40.58\n\n\n\n\nAfrican Infant Mortality Data Structure\n\nstr(infant_survival_rate)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\n\n\n\nAfrican Infant Mortality Data Summary\n\nsummary(infant_survival_rate)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n\n\n\nAfrican Mortality Object\n\nafrican_mortality = africadata %&gt;%\n  select(population, life_expectancy)\nhead(african_mortality)\n\n  population life_expectancy\n1   11124892           47.50\n2    5270844           35.98\n3    2431620           38.29\n4     524029           50.34\n5    4829291           35.21\n6    2786740           40.58\n\n\n\n\nAfrican Mortality Data Structure\n\nstr(african_mortality)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\n\n\n\nAfrican Mortality Data Summary\n\nsummary(african_mortality)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plotting",
    "href": "coding-exercise/coding-exercise.html#plotting",
    "title": "R Coding Exercise",
    "section": "Plotting",
    "text": "Plotting\n\nLife Expectancy as a Function of Infant Mortality\n\nregression = lm(infant_survival_rate$life_expectancy ~ infant_survival_rate$infant_mortality)\nrsq &lt;- function(x, y) summary(lm(infant_survival_rate$life_expectancy ~ infant_survival_rate$infant_mortality))$r.squared\nr_square = round(rsq(obs, mod), 3)\n# summary(regression)$coefficients - keep to sanity check\ncoeff = round(summary(regression)$coefficients[2],3)\ny_int = round(summary(regression)$coefficients[1],3)\nplot(\n  infant_survival_rate$infant_mortality,\n  infant_survival_rate$life_expectancy,\n  main='African Life Expectancy \\n Infant Mortality Effect',\n  xlab='Infant Mortality',\n  ylab='Life Expectancy',\n   col='blue', \n   bg='lightblue', \n   pch = 21,\n)\n# rsq_str = expression(paste(\"r\"^\"2:\"))\nrsq_str = \"r2: \"\ntext(175, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)\ntext(170, 70, paste0(rsq_str, r_square), cex=0.75)\nabline(\n  lm(\n    infant_survival_rate$life_expectancy ~ infant_survival_rate$infant_mortality),\n  col='black',\n  lwd=1.75)\n\n\n\n\n\n\nLife Expectancy as a Function of Population\n\nregression = lm(african_mortality$life_expectancy ~ african_mortality$population)\nrsq &lt;- function(x, y) summary(lm(african_mortality$life_expectancy ~ african_mortality$population))$r.squared\nr_square = round(rsq(obs, mod), 3)\n# summary(regression)$coefficients - keep to sanity check\ncoeff = round(summary(regression)$coefficients[2],9)\ny_int = round(summary(regression)$coefficients[1],3)\nplot(\n  african_mortality$population,\n  african_mortality$life_expectancy,\n  main='African Life Expectancy \\n Population Effect',\n  xlab='Population',\n  ylab='Life Expectancy',\n  col='blue', \n  bg='lightblue', \n  pch = 21,\n)\n# rsq_str = expression(paste(\"r\"^\"2:\"))\nrsq_str = \"r2: \"\ntext(155000000, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)\ntext(155000000, 70, paste0(rsq_str, r_square), cex=0.75)\nabline(\nlm(\n  african_mortality$life_expectancy ~ african_mortality$population),\ncol='black',\nlwd=1.75)\n\n\n\n\n** STILL NEED TO ANSWER QUESTION AT THE END OF THE PLOTTING SECTION**"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-data-processing",
    "href": "coding-exercise/coding-exercise.html#more-data-processing",
    "title": "R Coding Exercise",
    "section": "More Data Processing",
    "text": "More Data Processing\n\nMissing Years For Infant Mortality Data\n\nmiss_inf_mort_rows = africadata %&gt;%\n  filter(is.na(infant_mortality))\nhead(miss_inf_mort_rows)\n\n            country year infant_mortality life_expectancy fertility population\n1        Cape Verde 1960               NA           50.12      6.89     202316\n2              Chad 1960               NA           40.95      6.25    3002596\n3          Djibouti 1960               NA           45.77      6.46      83636\n4 Equatorial Guinea 1960               NA           37.69      5.51     252115\n5           Eritrea 1960               NA           39.03      6.90    1407631\n6             Gabon 1960               NA           38.83      4.38     499189\n        gdp continent         region\n1        NA    Africa Western Africa\n2 750173439    Africa  Middle Africa\n3        NA    Africa Eastern Africa\n4        NA    Africa  Middle Africa\n5        NA    Africa Eastern Africa\n6 887289809    Africa  Middle Africa\n\n\n\n\nPerform Year Groupby to Identify Distinct Missing Years\n\nmiss_inf_mort_yrs = miss_inf_mort_rows %&gt;%\n  group_by(year) %&gt;%\n  count(infant_mortality)\nmiss_inf_mort_yrs\n\n# A tibble: 23 × 3\n# Groups:   year [23]\n    year infant_mortality     n\n   &lt;int&gt;            &lt;dbl&gt; &lt;int&gt;\n 1  1960               NA    10\n 2  1961               NA    17\n 3  1962               NA    16\n 4  1963               NA    16\n 5  1964               NA    15\n 6  1965               NA    14\n 7  1966               NA    13\n 8  1967               NA    11\n 9  1968               NA    11\n10  1969               NA     7\n# ℹ 13 more rows\n\n\n\n\nExtract Only Year 2000 From africadata As New Object\n\nafricadata2000 = filter(africadata, year == 2000)\nafricadata2000\n\n                    country year infant_mortality life_expectancy fertility\n1                   Algeria 2000             33.9            73.3      2.51\n2                    Angola 2000            128.3            52.3      6.84\n3                     Benin 2000             89.3            57.2      5.98\n4                  Botswana 2000             52.4            47.6      3.41\n5              Burkina Faso 2000             96.2            52.6      6.59\n6                   Burundi 2000             93.4            46.7      7.06\n7                  Cameroon 2000             91.9            54.3      5.62\n8                Cape Verde 2000             29.1            68.4      3.70\n9  Central African Republic 2000            113.6            45.3      5.45\n10                     Chad 2000            105.7            51.5      7.35\n11                  Comoros 2000             72.7            62.1      5.32\n12         Congo, Dem. Rep. 2000            107.4            54.3      7.09\n13              Congo, Rep. 2000             76.6            52.5      5.13\n14            Cote d'Ivoire 2000             99.5            52.0      5.38\n15                 Djibouti 2000             79.7            60.0      4.47\n16                    Egypt 2000             37.0            69.7      3.31\n17        Equatorial Guinea 2000            104.8            52.9      5.77\n18                  Eritrea 2000             58.3            37.6      5.94\n19                 Ethiopia 2000             89.5            52.1      6.53\n20                    Gabon 2000             55.6            59.3      4.60\n21                   Gambia 2000             63.3            63.6      5.92\n22                    Ghana 2000             64.9            60.0      4.67\n23                   Guinea 2000            103.1            54.2      5.94\n24            Guinea-Bissau 2000            106.9            52.8      5.85\n25                    Kenya 2000             66.5            55.6      5.01\n26                  Lesotho 2000             84.1            50.7      4.09\n27                  Liberia 2000            123.0            55.8      5.88\n28                    Libya 2000             24.2            74.8      3.05\n29               Madagascar 2000             69.7            59.1      5.55\n30                   Malawi 2000            103.5            45.4      6.25\n31                     Mali 2000            116.0            53.5      6.84\n32               Mauritania 2000             76.2            63.8      5.38\n33                Mauritius 2000             16.4            71.4      1.99\n34                  Morocco 2000             42.2            71.5      2.70\n35               Mozambique 2000            115.0            52.3      5.78\n36                  Namibia 2000             49.4            54.0      4.03\n37                    Niger 2000            101.1            52.4      7.73\n38                  Nigeria 2000            112.0            55.2      6.10\n39                   Rwanda 2000            109.2            49.2      5.90\n40                  Senegal 2000             68.5            59.7      5.56\n41               Seychelles 2000             12.3            70.9      2.15\n42             Sierra Leone 2000            143.3            51.5      5.92\n43             South Africa 2000             54.0            56.4      2.87\n44                    Sudan 2000             67.8            62.4      5.44\n45                Swaziland 2000             84.0            48.8      4.21\n46                 Tanzania 2000             80.3            54.3      5.69\n47                     Togo 2000             76.2            56.7      5.29\n48                  Tunisia 2000             26.3            75.0      2.11\n49                   Uganda 2000             90.0            49.1      6.87\n50                   Zambia 2000             97.6            44.8      6.07\n51                 Zimbabwe 2000             63.5            47.9      4.07\n   population          gdp continent          region\n1    31183658  54790058957    Africa Northern Africa\n2    15058638   9129180361    Africa   Middle Africa\n3     6949366   2254838685    Africa  Western Africa\n4     1736579   5632391130    Africa Southern Africa\n5    11607944   2610945549    Africa  Western Africa\n6     6767073    835334807    Africa  Eastern Africa\n7    15927713  10075040331    Africa   Middle Africa\n8      438737    539227053    Africa  Western Africa\n9     3726048    959413051    Africa   Middle Africa\n10    8343321   1385050964    Africa   Middle Africa\n11     547696    201900820    Africa  Eastern Africa\n12   48048664   4305797176    Africa   Middle Africa\n13    3109269   3219893817    Africa   Middle Africa\n14   16517948  10417006096    Africa  Western Africa\n15     722562    551230862    Africa  Eastern Africa\n16   68334905  99838540997    Africa Northern Africa\n17     530896   1254223037    Africa   Middle Africa\n18    3535156    633600000    Africa  Eastern Africa\n19   66443603   8179533779    Africa  Eastern Africa\n20    1231548   5067838984    Africa   Middle Africa\n21    1228863    786665264    Africa  Western Africa\n22   18824994   4977488790    Africa  Western Africa\n23    8799165   3112362568    Africa  Western Africa\n24    1315455    215455490    Africa  Western Africa\n25   31065820  12691278914    Africa  Eastern Africa\n26    1856225    745832990    Africa Southern Africa\n27    2891968    529064647    Africa  Western Africa\n28    5337264  33896600871    Africa Northern Africa\n29   15744811   3877575177    Africa  Eastern Africa\n30   11193230   1743506520    Africa  Eastern Africa\n31   11046926   2422469641    Africa  Western Africa\n32    2711421   1293653473    Africa  Western Africa\n33    1185143   4582562398    Africa  Eastern Africa\n34   28950553  37020609825    Africa Northern Africa\n35   18264536   4248747769    Africa  Eastern Africa\n36    1897953   3908501441    Africa Southern Africa\n37   11224523   1798365123    Africa  Western Africa\n38  122876723  45983449593    Africa  Western Africa\n39    8021875   1734921293    Africa  Eastern Africa\n40    9860578   4691828357    Africa  Western Africa\n41      81154    614879765    Africa  Eastern Africa\n42    4060709    635876870    Africa  Western Africa\n43   44896856 132877648091    Africa Southern Africa\n44   28079664  12366140066    Africa Northern Africa\n45    1063715   1524452437    Africa Southern Africa\n46   33991590  10185786171    Africa  Eastern Africa\n47    4874735   1294243543    Africa  Western Africa\n48    9699192  21473261837    Africa Northern Africa\n49   23757636   6193246632    Africa  Eastern Africa\n50   10585220   3237716325    Africa  Eastern Africa\n51   12499981   6689957610    Africa  Eastern Africa\n\n\n\n\nafricadata2000 Data Structure\n\nstr(africadata2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n\n\n\nafricadata2000 Data Summary\n\nsummary(africadata2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-plotting",
    "href": "coding-exercise/coding-exercise.html#more-plotting",
    "title": "R Coding Exercise",
    "section": "More Plotting",
    "text": "More Plotting\n\nCreate The Same Plots For africadata2000 Object\n\nFilter New Object to Create Graph Datasets (1/2)\n\nafrican_mortality2000 = africadata2000 %&gt;%\n  select(population, life_expectancy)\nhead(african_mortality2000)\n\n  population life_expectancy\n1   31183658            73.3\n2   15058638            52.3\n3    6949366            57.2\n4    1736579            47.6\n5   11607944            52.6\n6    6767073            46.7\n\n\n\n\nFilter New Object to Create Graph Datasets (2/2)\n\ninfant_survival_rate2000 = africadata2000 %&gt;%\n  select(infant_mortality, life_expectancy)\nhead(african_mortality2000)\n\n  population life_expectancy\n1   31183658            73.3\n2   15058638            52.3\n3    6949366            57.2\n4    1736579            47.6\n5   11607944            52.6\n6    6767073            46.7\n\n\n\n\nInfant Mortality Effect\n\nregression = lm(infant_survival_rate2000$life_expectancy ~ infant_survival_rate2000$infant_mortality)\nrsq &lt;- function(x, y) summary(lm(infant_survival_rate2000$life_expectancy ~ infant_survival_rate2000$infant_mortality))$r.squared\nr_square = round(rsq(obs, mod), 3)\n# summary(regression)$coefficients - keep to sanity check\ncoeff = round(summary(regression)$coefficients[2],3)\ny_int = round(summary(regression)$coefficients[1],3)\nplot(\n  infant_survival_rate2000$infant_mortality,\n  infant_survival_rate2000$life_expectancy,\n  main='African Life Expectancy \\n Infant Mortality Effect',\n  xlab='Infant Mortality',\n  ylab='Life Expectancy',\n   col='blue', \n   bg='lightblue', \n   pch = 21,\n)\n# rsq_str = expression(paste(\"r\"^\"2:\"))\nrsq_str = \"r2: \"\ntext(130, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)\ntext(130, 73, paste0(rsq_str, r_square), cex=0.75)\nabline(\n  lm(\n    infant_survival_rate2000$life_expectancy ~ infant_survival_rate2000$infant_mortality),\n  col='black',\n  lwd=1.75)\n\n\n\n\n\n\nPopulation Effect\n\nregression = lm(african_mortality2000$life_expectancy ~ african_mortality2000$population)\nrsq &lt;- function(x, y) summary(lm(african_mortality2000$life_expectancy ~ african_mortality2000$population))$r.squared\nr_square = round(rsq(obs, mod), 3)\n# summary(regression)$coefficients - keep to sanity check\ncoeff = round(summary(regression)$coefficients[2],9)\ny_int = round(summary(regression)$coefficients[1],3)\nplot(\n  african_mortality2000$population,\n  african_mortality2000$life_expectancy,\n  main='African Life Expectancy \\n Population Effect',\n  xlab='Population',\n  ylab='Life Expectancy',\n  col='blue', \n  bg='lightblue', \n  pch = 21,\n)\n# rsq_str = expression(paste(\"r\"^\"2:\"))\nrsq_str = \"r2: \"\ntext(110000000, 75, paste0('y = ', coeff, 'x + ', y_int), cex=0.75)\ntext(110000000, 73, paste0(rsq_str, r_square), cex=0.75)\nabline(\nlm(\n  african_mortality2000$life_expectancy ~ african_mortality2000$population),\ncol='black',\nlwd=1.75)"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#simple-model-fits",
    "href": "coding-exercise/coding-exercise.html#simple-model-fits",
    "title": "R Coding Exercise",
    "section": "Simple Model Fits",
    "text": "Simple Model Fits\n\nFit Life Expectancy to Infant Mortality\n\nfit1 = lm(infant_survival_rate2000$life_expectancy ~ infant_survival_rate2000$infant_mortality)\nsummary(fit1)\n\n\nCall:\nlm(formula = infant_survival_rate2000$life_expectancy ~ infant_survival_rate2000$infant_mortality)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                                          Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)                               71.29331    2.42611  29.386  &lt; 2e-16\ninfant_survival_rate2000$infant_mortality -0.18916    0.02869  -6.594 2.83e-08\n                                             \n(Intercept)                               ***\ninfant_survival_rate2000$infant_mortality ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n\n\n\nFit Life Expectancy to Population\n\nfit2 = lm(african_mortality2000$life_expectancy ~ african_mortality2000$population)\nsummary(fit2)\n\n\nCall:\nlm(formula = african_mortality2000$life_expectancy ~ african_mortality2000$population)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n                                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                      5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\nafrican_mortality2000$population 2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n\n\nConclusion\nOur fit1 model’s (i.e. fit life expectancy to infant mortality) independent variable has a p-value less than the significance level, so we reject the null hypothesis and conclude that infant mortality has a significant effect on life expectancy. For every infant death, life expectancy reduces by 0.18916 Our fit2 model’s (i.e. fit life expectancy to population) independent variable has a p-value greater than the significance level, so we do not reject the null hypothesis and conclude that population does not have a significant effect on life expectancy.\n\n\n\nThis section contributed by SETH HARRIS.\n\nLoading and Exploring the Dataset:\n\nLoaded the dslabs package and the trump_tweets dataset.\nExplored the dataset using str(), summary(), and head() functions.\n\n\n\n# Load the dslabs package\nlibrary(dslabs)\n\n# Load the trump_tweets dataset\ndata(\"trump_tweets\")\n\n# Explore the dataset\nstr(trump_tweets)\n\n'data.frame':   20761 obs. of  8 variables:\n $ source                 : chr  \"Twitter Web Client\" \"Twitter Web Client\" \"Twitter Web Client\" \"Twitter Web Client\" ...\n $ id_str                 : chr  \"6971079756\" \"6312794445\" \"6090839867\" \"5775731054\" ...\n $ text                   : chr  \"From Donald Trump: Wishing everyone a wonderful holiday & a happy, healthy, prosperous New Year. Let’s think li\"| __truncated__ \"Trump International Tower in Chicago ranked 6th tallest building in world by Council on Tall Buildings & Urban \"| __truncated__ \"Wishing you and yours a very Happy and Bountiful Thanksgiving!\" \"Donald Trump Partners with TV1 on New Reality Series Entitled, Omarosa's Ultimate Merger: http://tinyurl.com/yk5m3lc\" ...\n $ created_at             : POSIXct, format: \"2009-12-23 12:38:18\" \"2009-12-03 14:39:09\" ...\n $ retweet_count          : int  28 33 13 5 7 4 2 4 1 22 ...\n $ in_reply_to_user_id_str: chr  NA NA NA NA ...\n $ favorite_count         : int  12 6 11 3 6 5 2 10 4 30 ...\n $ is_retweet             : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n\nsummary(trump_tweets)\n\n    source             id_str              text          \n Length:20761       Length:20761       Length:20761      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n   created_at                     retweet_count    in_reply_to_user_id_str\n Min.   :2009-05-04 13:54:25.00   Min.   :     0   Length:20761           \n 1st Qu.:2013-02-13 14:15:54.00   1st Qu.:    34   Class :character       \n Median :2014-05-03 07:07:38.00   Median :   264   Mode  :character       \n Mean   :2014-08-02 16:29:32.18   Mean   :  3854                          \n 3rd Qu.:2016-02-13 20:17:51.00   3rd Qu.:  3267                          \n Max.   :2018-01-01 08:37:52.00   Max.   :369530                          \n favorite_count   is_retweet     \n Min.   :     0   Mode :logical  \n 1st Qu.:    22   FALSE:20761    \n Median :   173                  \n Mean   : 13591                  \n 3rd Qu.:  8573                  \n Max.   :633253                  \n\nhead(trump_tweets)\n\n              source     id_str\n1 Twitter Web Client 6971079756\n2 Twitter Web Client 6312794445\n3 Twitter Web Client 6090839867\n4 Twitter Web Client 5775731054\n5 Twitter Web Client 5364614040\n6 Twitter Web Client 5203117820\n                                                                                                                                        text\n1       From Donald Trump: Wishing everyone a wonderful holiday & a happy, healthy, prosperous New Year. Let’s think like champions in 2010!\n2 Trump International Tower in Chicago ranked 6th tallest building in world by Council on Tall Buildings & Urban Habitat http://bit.ly/sqvQq\n3                                                                             Wishing you and yours a very Happy and Bountiful Thanksgiving!\n4                       Donald Trump Partners with TV1 on New Reality Series Entitled, Omarosa's Ultimate Merger: http://tinyurl.com/yk5m3lc\n5                         --Work has begun, ahead of schedule, to build the greatest golf course in history: Trump International – Scotland.\n6              --From Donald Trump: \"Ivanka and Jared’s wedding was spectacular, and they make a beautiful couple. I’m a very proud father.\"\n           created_at retweet_count in_reply_to_user_id_str favorite_count\n1 2009-12-23 12:38:18            28                    &lt;NA&gt;             12\n2 2009-12-03 14:39:09            33                    &lt;NA&gt;              6\n3 2009-11-26 14:55:38            13                    &lt;NA&gt;             11\n4 2009-11-16 16:06:10             5                    &lt;NA&gt;              3\n5 2009-11-02 09:57:56             7                    &lt;NA&gt;              6\n6 2009-10-27 10:31:48             4                    &lt;NA&gt;              5\n  is_retweet\n1      FALSE\n2      FALSE\n3      FALSE\n4      FALSE\n5      FALSE\n6      FALSE\n\n\nAfter reviewing the data sets available, I selected the “trump_tweets” dataset for further exploration. This data set contains all tweets from Donald Trump’s Twitter account from 2009 to 2017. Additionally, the results of a sentiment analysis, conducted on tweets from the campaign period (2015-06-17 to 2016-11-08), are included in sentiment_counts. The goal of exploring the trump_tweets dataset is to analyze and understand patterns and trends in the tweets made by former U.S. President Donald Trump. This analysis can provide insights into the topics he tweeted about, the frequency and timing of his tweets, the sentiment expressed in his tweets, and how his tweeting behavior changed over time. By examining this dataset, we can gain a better understanding of his communication strategy on social media and its potential impact on public opinion and political discourse.\nData Cleaning and Processing:\n\nRemoved rows with missing values using na.omit().\nConverted the created_at column to Date format.\n\n\n# Do any processing/cleaning (e.g., removing rows with missing values)\ntrump_tweets_clean &lt;- na.omit(trump_tweets) # Remove rows with missing values\n\n# Convert the date column to Date format\ntrump_tweets_clean$created_at &lt;- as.Date(trump_tweets_clean$created_at)\n\nExploratory Data Analysis:\n\nCreated a histogram plot to visualize the number of tweets over time.\n\n\n# Make a few exploratory figures\nlibrary(ggplot2)\n\n# Plot the number of tweets over time\nggplot(trump_tweets_clean, aes(x = created_at)) +\n  geom_histogram(binwidth = 30, fill = \"blue\", color = \"white\") +\n  labs(title = \"Number of Trump Tweets Over Time\", x = \"Date\", y = \"Number of Tweets\")\n\n\n\n# Finding: This plot shows the distribution of Trump's tweets over time. We can see spikes in activity around certain periods, indicating increased tweeting during those times.\n\nFrom the plot “Number of Trump Tweets Over Time,” we observe a few key trends:\n\nPeak Activity: There is a significant peak in tweet activity around the year 2013, indicating a period when Trump was highly active on Twitter.\nFluctuations: There are notable fluctuations in tweet frequency over time, with periods of high and low activity.\nDrop in Activity: After 2014, there is a marked decline in tweet frequency, with very few tweets observed after 2016.\n\nThese trends can be indicative of changes in Trump’s social media strategy or other external factors influencing his tweet activity.\nExploratory Data Analysis:\n\nCreated a bar plot to visualize the distribution of tweet sources.\n\n\n# Plot the distribution of tweet sources\nggplot(trump_tweets_clean, aes(x = source)) +\n  geom_bar(fill = \"red\") +\n  labs(title = \"Distribution of Trump Tweet Sources\", x = \"Source\", y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n# Finding: This plot shows the different sources from which Trump tweeted. It gives us an idea of the platforms he used most frequently for tweeting.\n\nBased on the plot above “Distribution of Trump Tweet Sources,” we can observe the following:\n\nTwitter Web Client is the most frequently used source, with a count exceeding 1500 tweets.\nTwitter for Android is the second most common source, with around 500 tweets.\nOther sources like TweetDeck, TwitLonger Beta, and Twitter for iPhone have a much lower count.\nThe plot also includes less frequently used sources like Mobile Web (M5), Twitter for BlackBerry, Twitter for iPad, and Twitter QandA.\n\nThis distribution indicates that the majority of tweets were posted using the Twitter Web Client and Android platforms.\nStatistical Modeling:\n\nPerformed linear regression to analyze the relationship between the number of retweets and favorites.\nPerformed linear regression to analyze the relationship between tweet length and the number of favorites.\n\n\n# Run some simple statistical models\n# Model 1: Linear regression of the number of favorites based on the number of retweets\nmodel1 &lt;- lm(favorite_count ~ retweet_count, data = trump_tweets_clean)\nsummary(model1)\n\n\nCall:\nlm(formula = favorite_count ~ retweet_count, data = trump_tweets_clean)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-119669    -136    -131    -128   31975 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   128.44252   68.56449   1.873   0.0611 .  \nretweet_count   3.38915    0.03283 103.220   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3361 on 2440 degrees of freedom\nMultiple R-squared:  0.8137,    Adjusted R-squared:  0.8136 \nF-statistic: 1.065e+04 on 1 and 2440 DF,  p-value: &lt; 2.2e-16\n\n# Finding: This model examines the relationship between the number of retweets and the number of favorites. The summary provides information on the strength and significance of this relationship.\n\n# Model 2: Linear regression of the number of favorites based on the length of the tweet\ntrump_tweets_clean$text_length &lt;- nchar(trump_tweets_clean$text)\nmodel2 &lt;- lm(favorite_count ~ text_length, data = trump_tweets_clean)\nsummary(model2)\n\n\nCall:\nlm(formula = favorite_count ~ text_length, data = trump_tweets_clean)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -6007  -1475    -73    468 100932 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -1763.260    256.052  -6.886 7.26e-12 ***\ntext_length    54.012      4.001  13.500  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7511 on 2440 degrees of freedom\nMultiple R-squared:  0.0695,    Adjusted R-squared:  0.06912 \nF-statistic: 182.2 on 1 and 2440 DF,  p-value: &lt; 2.2e-16\n\n# Finding: This model examines the relationship between the length of a tweet and the number of favorites. The summary provides insights into whether longer tweets tend to receive more favorites.\n\n# Report the results from the models\ncat(\"Model 1: Linear regression of the number of favorites based on the number of retweets\\n\")\n\nModel 1: Linear regression of the number of favorites based on the number of retweets\n\nprint(summary(model1))\n\n\nCall:\nlm(formula = favorite_count ~ retweet_count, data = trump_tweets_clean)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-119669    -136    -131    -128   31975 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   128.44252   68.56449   1.873   0.0611 .  \nretweet_count   3.38915    0.03283 103.220   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3361 on 2440 degrees of freedom\nMultiple R-squared:  0.8137,    Adjusted R-squared:  0.8136 \nF-statistic: 1.065e+04 on 1 and 2440 DF,  p-value: &lt; 2.2e-16\n\ncat(\"Model 2: Linear regression of the number of favorites based on the length of the tweet\\n\")\n\nModel 2: Linear regression of the number of favorites based on the length of the tweet\n\nprint(summary(model2))\n\n\nCall:\nlm(formula = favorite_count ~ text_length, data = trump_tweets_clean)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -6007  -1475    -73    468 100932 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -1763.260    256.052  -6.886 7.26e-12 ***\ntext_length    54.012      4.001  13.500  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7511 on 2440 degrees of freedom\nMultiple R-squared:  0.0695,    Adjusted R-squared:  0.06912 \nF-statistic: 182.2 on 1 and 2440 DF,  p-value: &lt; 2.2e-16\n\n\n\n\nModel 1: Linear regression of the number of favorites based on the number of retweets\nSummary: - Intercept: 128.44 (p = 0.0611) - Slope (retweet_count): 3.39 (p &lt; 2e-16)\nFindings: - Strong positive relationship between retweets and favorites. - High R-squared value (0.8137), indicating 81.37% of the variability in favorites is explained by retweets. - Significant model (p-value &lt; 2.2e-16).\n\n\nModel 2: Linear regression of the number of favorites based on the length of the tweet\nSummary: - Intercept: -1763.26 (p &lt; 2e-16) - Slope (text_length): 54.01 (p &lt; 2e-16)\nFindings: - Positive relationship between tweet length and favorites. - Low R-squared value (0.0695), indicating 6.95% of the variability in favorites is explained by tweet length. - Significant model (p-value &lt; 2.2e-16).\n\n\nComments on Findings:\n\nModel 1: The number of retweets is a strong predictor of the number of favorites, with a high R-squared value and statistically significant coefficients. This suggests that tweets with higher retweets tend to receive more favorites.\nModel 2: The length of the tweet has a weaker relationship with the number of favorites, as indicated by the lower R-squared value. While the model is statistically significant, it explains less of the variability in the number of favorites compared to retweets.\n\nThese findings suggest that while both retweets and tweet length can influence the number of favorites, retweets are a much stronger predictor.\nReporting Findings:\n\nAnalyzed and reported the results of the linear regression models, highlighting key statistics and the significance of the predictors.\n\nBy following these steps, we were able to gain insights into the patterns and predictors of tweet engagement in the Trump_Tweets dataset.\n\n\nConclusion\nThe analysis of the Trump Tweets dataset reveals several interesting insights:\n\nTweet Frequency Over Time: The histogram plot shows a significant increase in the number of tweets around mid-2013, with a peak and subsequent decline by early 2014. This trend may correlate with specific events or increased activity during that period.\nTweet Sources: The majority of Trump’s tweets were sent from the “Twitter Web Client,” followed by “Twitter for Android.” This suggests a preference for these platforms.\nStatistical Models:\n\nModel 1: There is a strong positive relationship between the number of retweets and the number of favorites, with a high R-squared value of 0.8137. This indicates that retweets are a strong predictor of favorites.\nModel 2: The length of the tweet also positively correlates with the number of favorites but to a much lesser extent, with an R-squared value of 0.0695. While statistically significant, tweet length explains much less variability in favorites compared to retweets.\n\n\nIn summary, the number of retweets is a strong indicator of the popularity of Trump’s tweets, significantly more so than the length of the tweet. This analysis provides insights into the factors influencing the engagement levels of tweets from this dataset."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About Me",
    "section": "",
    "text": "The Real Family\n\n\n\nPersonal Background\nMy name is Collin Real. I’m 27 years old, and I grew up in Saint Hedwig, Texas. My hobbies include fitness, technology, and hanging out with my friends and family. I also breed Persian cats.\n\n\nEducation/Career\nI have a Bachelor’s and Master’s Degree in Accounting, and worked as a Tax Accountant for 3-4 years. As I was finishing my accounting degrees, my friend introduced me to programming, and I instantly knew I was headed for a career change. I researched how Python could be used in accounting/finance, discovering the power of automation, building websites, and data science. To gain experience, I used YouTube, GitHub, and many other websites to learn from projects created by others. After adding this experience to my resume, I joined the Macrospace Analytics team at H-E-B in 2023 as an analyst, performing typical analyst as well as data science work. I hope to transition fully to data science work once I complete the MSDA program.\n\n\nStorytelling w/ Data"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Placeholder file for the future data/results presentation exercise."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Demographic Impact on Investment",
    "section": "",
    "text": "SRI LAKSHMIR CHUNDRU contributed to this exercise."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Demographic Impact on Investment",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nCustomer demographics, such as religion, gender, height, and weight were analyzed to identify which of these demographics had more significant influences on an individual’s investments."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Demographic Impact on Investment",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nThe two variables I added to the data sheet are Religion and Investments. The Religion variable seeks to identify the spiritual beliefs, if any, of each individual. The Investments variable represents the total fair market value of an individual’s investment accounts."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Demographic Impact on Investment",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nCan individual’s be clustered into groups based on their demographics and the fair market value of their investment accounts? If so, how do we use these clusters to gain a competitive advantage?"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Demographic Impact on Investment",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nDummy data was used for this report."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Demographic Impact on Investment",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\n\n3.2.0.1 Import libraries.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\n\n\n3.2.0.2 Import Data\n\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\nprint(rawdata)\n\n# A tibble: 14 × 5\n   Height Weight Gender Religion     Investments\n   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n 1 180        80 M      Christianity       11000\n 2 175        70 O      Agnostic            5000\n 3 sixty      60 F      Islam               6500\n 4 178        76 F      Judaism             9000\n 5 192        90 NA     Atheist            12000\n 6 6          55 F      Christianity        3000\n 7 156        90 O      Buddhism            4200\n 8 166       110 M      Hinduism            6600\n 9 155        54 N      Atheist             1200\n10 145      7000 M      Agnostic            8700\n11 165        NA F      Islam              12400\n12 133        45 F      Mormonism           2600\n13 166        55 M      Mormonism           9900\n14 154        50 M      Buddhism            7300\n\n\n\n\n3.2.0.3 Check Data\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`        \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                   \n1 Height          height in centimeters                 numeric value &gt;0 or NA  \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA  \n3 Gender          identified gender (male/female/other) M/F/O/NA                \n4 Religion        spiritual beliefs                     Christianity, Islam, Ju…\n5 Investments     fmv of investments in dollars         numeric value, or NA    \n\n\n\n\n3.2.0.4 Descriptive Statistics\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height      &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"1…\n$ Weight      &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender      &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F…\n$ Religion    &lt;chr&gt; \"Christianity\", \"Agnostic\", \"Islam\", \"Judaism\", \"Atheist\",…\n$ Investments &lt;dbl&gt; 11000, 5000, 6500, 9000, 12000, 3000, 4200, 6600, 1200, 87…\n\nsummary(rawdata)\n\n    Height              Weight          Gender            Religion        \n Length:14          Min.   :  45.0   Length:14          Length:14         \n Class :character   1st Qu.:  55.0   Class :character   Class :character  \n Mode  :character   Median :  70.0   Mode  :character   Mode  :character  \n                    Mean   : 602.7                                        \n                    3rd Qu.:  90.0                                        \n                    Max.   :7000.0                                        \n                    NA's   :1                                             \n  Investments   \n Min.   : 1200  \n 1st Qu.: 4400  \n Median : 6950  \n Mean   : 7100  \n 3rd Qu.: 9675  \n Max.   :12400  \n                \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Religion     Investments\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1 180        80 M      Christianity       11000\n2 175        70 O      Agnostic            5000\n3 sixty      60 F      Islam               6500\n4 178        76 F      Judaism             9000\n5 192        90 NA     Atheist            12000\n6 6          55 F      Christianity        3000\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nReligion\n0\n1\n5\n12\n0\n8\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\nInvestments\n0\n1.00\n7100.00\n3580.50\n1200\n4400\n6950\n9675\n12400\n▇▅▇▇▇\n\n\n\n\n\n\n\n3.2.0.5 Data Cleaning\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)))\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nd3$Gender &lt;- as.factor(d3$Gender)\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()  \nprocesseddata &lt;- d4\nprocesseddata\n\n# A tibble: 9 × 5\n  Height Weight Gender Religion     Investments\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1    180     80 M      Christianity       11000\n2    175     70 O      Agnostic            5000\n3    178     76 F      Judaism             9000\n4    183     55 F      Christianity        3000\n5    156     90 O      Buddhism            4200\n6    166    110 M      Hinduism            6600\n7    133     45 F      Mormonism           2600\n8    166     55 M      Mormonism           9900\n9    154     50 M      Buddhism            7300"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Demographic Impact on Investment",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nOne linear model was created with height as our dependent variable and weight/religion as our predictors."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Demographic Impact on Investment",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\n?@tbl-summarytable shows a summary of the data.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Demographic Impact on Investment",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Demographic Impact on Investment",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871\n\n\n\n\n\n\n\n4.3.1 Distribution of Height by Religion\n\n\n\n\n\nFigure 2: Distribution of height by religion.\n\n\n\n\n\n\n4.3.2 Correlation Between Investments and Weight\n\n\n\n\n\nFigure 3: The relationship between investments and weight.\n\n\n\n\n\n\n4.3.3 Investments/Religious Influence on Height\n\n\n\n\nTable 3: Linear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n164.913979\n37.0650265\n4.4493150\n0.0469828\n\n\nWeight\n0.144086\n0.4760345\n0.3026798\n0.7907129\n\n\nReligionBuddhism\n-20.000000\n19.8783599\n-1.0061192\n0.4203016\n\n\nReligionChristianity\n6.860215\n19.9139524\n0.3444929\n0.7633274\n\n\nReligionHinduism\n-14.763441\n29.8234767\n-0.4950275\n0.6696182\n\n\nReligionJudaism\n2.135484\n23.1305752\n0.0923230\n0.9348565\n\n\nReligionMormonism\n-22.618280\n22.0407063\n-1.0262048\n0.4126949"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Demographic Impact on Investment",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nTwo diagnostic plots were created to visualize the data. The box plot identifies the distribution of data among the categorical variable Religion and helps identify potential outliers. Our box plots demonstrate few variation in height for all religions except Mormonism. The scatter plot illustrates the relationship between the Weight and Investments variables (i.e. their degree of correlation). The scatter plot does not show much correlation between the two variables."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Demographic Impact on Investment",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nOne major limitation is the small sample size. It’s difficult to identify patterns when a lack of data is present. Another limitation is not creating additional plots for other combinations of variables. One strength is the level of demographic data which is essential for market segmentation."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Demographic Impact on Investment",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nOne of the key takeaways from this project is the importance of data acquisition and validating it’s integrity. Small samples sizes and junk data limit the opportunity of producing valuable insights. Data is the most critical asset for predictive modeling. If the integrity of a dataset is in question, so are the results of every model built on top of it.\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/c2cypher/codebase/msda/msda-grad-school/collinreal-P2-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/c2cypher/codebase/msda/msda-grad-school/collinreal-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/c2cypher/codebase/msda/msda-grad-school/collinreal-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\nrawdata\n\n# A tibble: 14 × 5\n   Height Weight Gender Religion     Investments\n   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n 1 180        80 M      Christianity       11000\n 2 175        70 O      Agnostic            5000\n 3 sixty      60 F      Islam               6500\n 4 178        76 F      Judaism             9000\n 5 192        90 NA     Atheist            12000\n 6 6          55 F      Christianity        3000\n 7 156        90 O      Buddhism            4200\n 8 166       110 M      Hinduism            6600\n 9 155        54 N      Atheist             1200\n10 145      7000 M      Agnostic            8700\n11 165        NA F      Islam              12400\n12 133        45 F      Mormonism           2600\n13 166        55 M      Mormonism           9900\n14 154        50 M      Buddhism            7300\n\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`        \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                   \n1 Height          height in centimeters                 numeric value &gt;0 or NA  \n2 Weight          weight in kilograms                   numeric value &gt;0 or NA  \n3 Gender          identified gender (male/female/other) M/F/O/NA                \n4 Religion        spiritual beliefs                     Christianity, Islam, Ju…\n5 Investments     fmv of investments in dollars         numeric value, or NA    \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height      &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"1…\n$ Weight      &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender      &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F…\n$ Religion    &lt;chr&gt; \"Christianity\", \"Agnostic\", \"Islam\", \"Judaism\", \"Atheist\",…\n$ Investments &lt;dbl&gt; 11000, 5000, 6500, 9000, 12000, 3000, 4200, 6600, 1200, 87…\n\nsummary(rawdata)\n\n    Height              Weight          Gender            Religion        \n Length:14          Min.   :  45.0   Length:14          Length:14         \n Class :character   1st Qu.:  55.0   Class :character   Class :character  \n Mode  :character   Median :  70.0   Mode  :character   Mode  :character  \n                    Mean   : 602.7                                        \n                    3rd Qu.:  90.0                                        \n                    Max.   :7000.0                                        \n                    NA's   :1                                             \n  Investments   \n Min.   : 1200  \n 1st Qu.: 4400  \n Median : 6950  \n Mean   : 7100  \n 3rd Qu.: 9675  \n Max.   :12400  \n                \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Religion     Investments\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1 180        80 M      Christianity       11000\n2 175        70 O      Agnostic            5000\n3 sixty      60 F      Islam               6500\n4 178        76 F      Judaism             9000\n5 192        90 NA     Atheist            12000\n6 6          55 F      Christianity        3000\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nReligion\n0\n1\n5\n12\n0\n8\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\nInvestments\n0\n1.00\n7100.00\n3580.50\n1200\n4400\n6950\n9675\n12400\n▇▅▇▇▇\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nlibrary(dplyr)\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nReligion\n0\n1\n5\n12\n0\n8\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nInvestments\n0\n1.00\n7146.15\n3722.37\n1200\n4200.00\n7300\n9900\n12400\n▇▅▅▇▇\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nReligion\n0\n1\n5\n12\n0\n8\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nInvestments\n0\n1.00\n7146.15\n3722.37\n1200\n4200.00\n7300\n9900\n12400\n▇▅▅▇▇\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nReligion\n0\n1\n7\n12\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nInvestments\n0\n1\n6527.27\n3633.76\n1200\n3600.0\n6600\n9450\n12000\n▇▅▅▂▇\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReligion\n0\n1\n7\n12\n0\n7\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nInvestments\n0\n1\n6527.27\n3633.76\n1200\n3600.0\n6600\n9450\n12000\n▇▅▅▂▇\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nReligion\n0\n1\n7\n12\n0\n6\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nInvestments\n0\n1\n6511.11\n3035.39\n2600\n4200\n6600\n9000\n11000\n▇▂▅▂▅\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\nd4\n\n# A tibble: 9 × 5\n  Height Weight Gender Religion     Investments\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1    180     80 M      Christianity       11000\n2    175     70 O      Agnostic            5000\n3    178     76 F      Judaism             9000\n4    183     55 F      Christianity        3000\n5    156     90 O      Buddhism            4200\n6    166    110 M      Hinduism            6600\n7    133     45 F      Mormonism           2600\n8    166     55 M      Mormonism           9900\n9    154     50 M      Buddhism            7300\n\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Collin Real - Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  }
]